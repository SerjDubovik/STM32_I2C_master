#include "stm32f10x.h"
#include "GPIO.h"


#define I2C_PORT         I2C1
#define I2C_GPIO_PORT    GPIOB
#define I2C_CLOCK        RCC_APB1Periph_I2C1

/* LM75 defines */
	#define  LM75_ADDR1  0x90
	#define  LM75_ADDR2  0x92
	#define  LM75_ADDR3  0x94

/* LM75 registers */
#define LM75_REG_TEMP                 0x00 // Temperature
#define LM75_REG_CONF                 0x01 // Configuration
#define LM75_REG_THYS                 0x02 // Hysteresis
#define LM75_REG_TOS                  0x03 // Overtemperature shutdown


unsigned short reg_i2c		= LM75_REG_TEMP;
unsigned short addr_i2c		= LM75_ADDR1;

unsigned short count_termometr;

unsigned short temper_plate;
unsigned short temper_1;
unsigned short temper_2;


// прототипы
void I2C1_init(void);
uint16_t LM75_ReadReg(uint8_t reg, uint8_t LM75_Address);
int16_t LM75_Temperature(uint8_t LM75_Address);
void LM75_Shutdown(FunctionalState newstate, uint8_t LM75_Address);
void LM75_WriteConf(uint8_t value, uint8_t LM75_Address);
uint8_t LM75_ReadConf(uint8_t LM75_Address);







int main(void)
{

	init_GPIO();

    relay_1(off);
    relay_2(off);

    blue_led(off);
    red_led(off);

    I2C1_init();


    uint16_t value;
    uint16_t state_I2C = 1;

    count_termometr  = 0;


	for(;;)
	{


		switch (state_I2C)
		{
			case 0:
			{

			} break;

			case 1:
			{
				I2C_AcknowledgeConfig(I2C_PORT,ENABLE); 														// Enable I2C acknowledgment
				I2C_GenerateSTART(I2C_PORT,ENABLE);

				state_I2C = 2;

			} break;

			case 2:
			{

				if(I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_MODE_SELECT))										// Wait for EV5
				{
					state_I2C = 3;
				}
			} break;

			case 3:
			{
				I2C_Send7bitAddress(I2C_PORT,addr_i2c,I2C_Direction_Transmitter); 							// Send slave address
				state_I2C = 4;
			} break;

			case 4:
			{
				if(I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))							// Wait for EV6
				{
					state_I2C = 5;
				}
			} break;

			case 5:
			{
				I2C_SendData(I2C_PORT,reg_i2c); 																// Send register address
				state_I2C = 6;
			} break;

			case 6:
			{
				if(I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_TRANSMITTED))									// Wait for EV8
				{
					state_I2C = 7;
				}
			} break;

			case 7:
			{
				I2C_GenerateSTART(I2C_PORT,ENABLE); 															// Send repeated START condition (aka Re-START)
				state_I2C = 8;
			} break;

			case 8:
			{
				if(I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_MODE_SELECT))										// Wait for EV5
				{
					state_I2C = 9;
				}
			} break;

			case 9:
			{
				I2C_Send7bitAddress(I2C_PORT,addr_i2c,I2C_Direction_Receiver); 								// Send slave address for READ
				state_I2C = 10;
			} break;

			case 10:
			{
				if(I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))							// Wait for EV6
				{
					state_I2C = 11;
				}
			} break;

			case 11:
			{
				if(I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_RECEIVED))										// Wait for EV7 (Byte received from slave)
				{
					state_I2C = 12;
				}
			} break;

			case 12:
			{
				value = (I2C_ReceiveData(I2C_PORT) << 8); 														// Receive high byte
				I2C_AcknowledgeConfig(I2C_PORT,DISABLE); 														// Disable I2C acknowledgment
				I2C_GenerateSTOP(I2C_PORT,ENABLE); 																// Send STOP condition

				state_I2C = 13;
			} break;

			case 13:
			{
				if(I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_RECEIVED))										// Wait for EV7 (Byte received from slave)
				{
					state_I2C = 14;
				}
			} break;

			case 14:
			{
				value |= I2C_ReceiveData(I2C_PORT); 															// Receive low byte

				uint16_t raw;
				int16_t temp;

				raw = value >> 7;

				if (raw & 0x0100) {
					// Negative temperature
					temp = -10 * (((~(uint8_t)(raw & 0xFE) + 1) & 0x7F) >> 1) - (raw & 0x01) * 5;
				} else {
					// Positive temperature
					temp = ((raw & 0xFE) >> 1) * 10 + (raw & 0x01) * 5;
				}

				value = temp;




				if(count_termometr == 0)
				{
					temper_plate = value;
					addr_i2c = LM75_ADDR2;
					count_termometr = 1;
				}

				if(count_termometr == 1)
				{
					temper_1 = value;
					addr_i2c = LM75_ADDR3;
					count_termometr = 2;
				}

				if(count_termometr == 2)
				{
					temper_2 = value;
					addr_i2c = LM75_ADDR1;
					count_termometr = 0;
				}

				state_I2C = 1;
			} break;

		} // скобка свича













	    /*
	    int16_t temp1 = LM75_Temperature(LM75_ADDR1);
		//LM75_Shutdown(DISABLE,LM75_ADDR1);

		int16_t temp2 = LM75_Temperature(LM75_ADDR2);
		//LM75_Shutdown(DISABLE,LM75_ADDR2);

		int16_t temp3 = LM75_Temperature(LM75_ADDR3);
		//LM75_Shutdown(DISABLE,LM75_ADDR3);
	    */

	} // скобка бесконечного цикла





} // скобка мейна




void I2C1_init(void)
{

  I2C_InitTypeDef I2C_InitStructure;
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);


  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_OwnAddress1 = 0x00; // —обственный адрес
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = 100000; // 100 к√ц
  I2C_Cmd(I2C1, ENABLE);

  I2C_Init(I2C1, &I2C_InitStructure);
}


// Read 16-bit LM75 register
uint16_t LM75_ReadReg(uint8_t reg, uint8_t LM75_Address)
{
	uint16_t value;

	I2C_AcknowledgeConfig(I2C_PORT,ENABLE); 														// Enable I2C acknowledgment
	I2C_GenerateSTART(I2C_PORT,ENABLE);
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_MODE_SELECT)); 								// Wait for EV5
	I2C_Send7bitAddress(I2C_PORT,LM75_Address,I2C_Direction_Transmitter); 							// Send slave address
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)); 					// Wait for EV6
	I2C_SendData(I2C_PORT,reg); 																	// Send register address
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_TRANSMITTED)); 							// Wait for EV8
	I2C_GenerateSTART(I2C_PORT,ENABLE); 															// Send repeated START condition (aka Re-START)
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_MODE_SELECT)); 								// Wait for EV5
	I2C_Send7bitAddress(I2C_PORT,LM75_Address,I2C_Direction_Receiver); 								// Send slave address for READ
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)); 						// Wait for EV6
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_RECEIVED)); 								// Wait for EV7 (Byte received from slave)
	value = (I2C_ReceiveData(I2C_PORT) << 8); 														// Receive high byte
	I2C_AcknowledgeConfig(I2C_PORT,DISABLE); 														// Disable I2C acknowledgment
	I2C_GenerateSTOP(I2C_PORT,ENABLE); 																// Send STOP condition
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_RECEIVED)); 								// Wait for EV7 (Byte received from slave)
	value |= I2C_ReceiveData(I2C_PORT); 															// Receive low byte

	return value;
}




// Read value from LM75 configuration register (8 bit)
uint8_t LM75_ReadConf(uint8_t LM75_Address)
{
	uint8_t value;

	I2C_AcknowledgeConfig(I2C_PORT,ENABLE); 														// Enable I2C acknowledgment
	I2C_GenerateSTART(I2C_PORT,ENABLE);
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_MODE_SELECT)); 								// Wait for EV5
	I2C_Send7bitAddress(I2C_PORT,LM75_Address,I2C_Direction_Transmitter);	 							// Send slave address
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)); 					// Wait for EV6
	I2C_SendData(I2C_PORT,LM75_REG_CONF); 															// Send register address
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_TRANSMITTED)); 							// Wait for EV8
	I2C_GenerateSTART(I2C_PORT,ENABLE); 															// Send repeated START condition (aka Re-START)
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_MODE_SELECT)); 								// Wait for EV5
	I2C_Send7bitAddress(I2C_PORT,LM75_Address,I2C_Direction_Receiver); 								// Send slave address for READ
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)); 						// Wait for EV6
	I2C_AcknowledgeConfig(I2C_PORT,DISABLE); 														// Disable I2C acknowledgment
	I2C_GenerateSTOP(I2C_PORT,ENABLE); 																// Send STOP condition
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_RECEIVED)); 								// Wait for EV7 (Byte received from slave)
	value = I2C_ReceiveData(I2C_PORT);

	return value;
}

// Write value to LM75 configuration register  (8 bit)
void LM75_WriteConf(uint8_t value, uint8_t LM75_Address)
{
	I2C_AcknowledgeConfig(I2C_PORT,ENABLE); 														// Enable I2C acknowledgment
	I2C_GenerateSTART(I2C_PORT,ENABLE);
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_MODE_SELECT)); 								// Wait for EV5
	I2C_Send7bitAddress(I2C_PORT,LM75_Address,I2C_Direction_Transmitter); 								// Send slave address
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)); 					// Wait for EV6
	I2C_SendData(I2C_PORT,LM75_REG_CONF); 															// Send register address
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_TRANSMITTED)); 							// Wait for EV8
	I2C_SendData(I2C_PORT,value);
	while (!I2C_CheckEvent(I2C_PORT,I2C_EVENT_MASTER_BYTE_TRANSMITTED)); 							// Wait for EV8
	I2C_GenerateSTOP(I2C_PORT,ENABLE);
}


void LM75_Shutdown(FunctionalState newstate, uint8_t LM75_Address)
{
	uint8_t value;

	value = LM75_ReadConf(LM75_Address);
	LM75_WriteConf(newstate == ENABLE ? value | 0x01 : value & 0xFE, LM75_Address);
}




int16_t LM75_Temperature(uint8_t LM75_Address)
{
	uint16_t raw;
	int16_t temp;

	raw = LM75_ReadReg(LM75_REG_TEMP, LM75_Address) >> 7;
	if (raw & 0x0100) {
		// Negative temperature
		temp = -10 * (((~(uint8_t)(raw & 0xFE) + 1) & 0x7F) >> 1) - (raw & 0x01) * 5;
	} else {
		// Positive temperature
		temp = ((raw & 0xFE) >> 1) * 10 + (raw & 0x01) * 5;
	}

	return temp;

}
